# .github/workflows/streamlit-app.yml
name: Build & Deploy Streamlit app

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
  release:
      types: [created]

permissions:
  contents: write

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"
  #     - uses: streamlit/streamlit-app-action@v0.0.3
  #       with:
  #         app-path: test_app.py
  #         ruff: true
  #         pytest-args: -v --junit-xml=test-results.xml
  #     - name: Surface failing tests
  #       if: always()
  #       uses: pmeier/pytest-results-action@main
  #       with:
  #         path: test-results.xml
  #         summary: true
  #         display-options: fEX
  # Build-and-deploy-docker-image:
  #   needs: test # this line refers, after passing the test build the container
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}
  #     - name: Build and push docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit-cheat-sheet-app:latest
  bump-version:
    runs-on: ubuntu-latest
    # needs: Build-and-deploy-docker-image
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install bump2version
        run:  pip install bump2version 
      - name: Configure Git
        run: |
          git config --global user.email "bhanuprakash.vlit@gmail.com"
          git config --global user.name "Bhanu Prakash"

      - name: Bump version
        id: bump_version
        run: |
          bump2version patch 
          NEW_VERSION=$(bump2version --dry-run --list patch | grep new_version | sed -r 's/^.*=//')
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
      - name: Output new version for debugging
        run: echo "NEW VERSION is $NEW_VERSION"
        env:
          NEW_VERSION: ${{ steps.bump_version.outputs.NEW_VERSION }}


      - name: Push version bump
        run: git push --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  create-release:
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Output featch tags for debugging
        run: git tag

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.bump-version.outputs.NEW_VERSION}}
          release_name: Release ${{ needs.bump-version.outputs.NEW_VERSION }}
          draft: false
          prerelease: false
      # - name: Upload Release Assets
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./dist/your_package-${{steps.bump_version.outputs.new_version}}.tar.gz
      #     asset_name: your_package-${{steps.bump_version.outputs.new_version}}.tar.gz
      #     asset_content_type: application/gzip

    